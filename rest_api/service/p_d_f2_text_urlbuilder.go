// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// PDF2TextURL generates an URL for the p d f2 text operation
type PDF2TextURL struct {
	Bbox       *bool
	BboxLayout *bool
	Colspacing *float64
	Cropbox    *bool
	Enc        *string
	Eol        *string
	F          *int64
	Fixed      *int64
	H          *int64
	Htmlmeta   *bool
	L          *int64
	Layout     *bool
	Nodiag     *bool
	Opw        *string
	Pgbrk      *bool
	R          *int64
	Raw        *bool
	Tsv        *bool
	Upw        *string
	W          *int64
	X          *int64
	Y          *int64

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *PDF2TextURL) WithBasePath(bp string) *PDF2TextURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *PDF2TextURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *PDF2TextURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/"

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var bboxQ string
	if o.Bbox != nil {
		bboxQ = swag.FormatBool(*o.Bbox)
	}
	if bboxQ != "" {
		qs.Set("bbox", bboxQ)
	}

	var bboxLayoutQ string
	if o.BboxLayout != nil {
		bboxLayoutQ = swag.FormatBool(*o.BboxLayout)
	}
	if bboxLayoutQ != "" {
		qs.Set("bbox-layout", bboxLayoutQ)
	}

	var colspacingQ string
	if o.Colspacing != nil {
		colspacingQ = swag.FormatFloat64(*o.Colspacing)
	}
	if colspacingQ != "" {
		qs.Set("colspacing", colspacingQ)
	}

	var cropboxQ string
	if o.Cropbox != nil {
		cropboxQ = swag.FormatBool(*o.Cropbox)
	}
	if cropboxQ != "" {
		qs.Set("cropbox", cropboxQ)
	}

	var encQ string
	if o.Enc != nil {
		encQ = *o.Enc
	}
	if encQ != "" {
		qs.Set("enc", encQ)
	}

	var eolQ string
	if o.Eol != nil {
		eolQ = *o.Eol
	}
	if eolQ != "" {
		qs.Set("eol", eolQ)
	}

	var fQ string
	if o.F != nil {
		fQ = swag.FormatInt64(*o.F)
	}
	if fQ != "" {
		qs.Set("f", fQ)
	}

	var fixedQ string
	if o.Fixed != nil {
		fixedQ = swag.FormatInt64(*o.Fixed)
	}
	if fixedQ != "" {
		qs.Set("fixed", fixedQ)
	}

	var hQ string
	if o.H != nil {
		hQ = swag.FormatInt64(*o.H)
	}
	if hQ != "" {
		qs.Set("h", hQ)
	}

	var htmlmetaQ string
	if o.Htmlmeta != nil {
		htmlmetaQ = swag.FormatBool(*o.Htmlmeta)
	}
	if htmlmetaQ != "" {
		qs.Set("htmlmeta", htmlmetaQ)
	}

	var lQ string
	if o.L != nil {
		lQ = swag.FormatInt64(*o.L)
	}
	if lQ != "" {
		qs.Set("l", lQ)
	}

	var layoutQ string
	if o.Layout != nil {
		layoutQ = swag.FormatBool(*o.Layout)
	}
	if layoutQ != "" {
		qs.Set("layout", layoutQ)
	}

	var nodiagQ string
	if o.Nodiag != nil {
		nodiagQ = swag.FormatBool(*o.Nodiag)
	}
	if nodiagQ != "" {
		qs.Set("nodiag", nodiagQ)
	}

	var opwQ string
	if o.Opw != nil {
		opwQ = *o.Opw
	}
	if opwQ != "" {
		qs.Set("opw", opwQ)
	}

	var pgbrkQ string
	if o.Pgbrk != nil {
		pgbrkQ = swag.FormatBool(*o.Pgbrk)
	}
	if pgbrkQ != "" {
		qs.Set("pgbrk", pgbrkQ)
	}

	var rQ string
	if o.R != nil {
		rQ = swag.FormatInt64(*o.R)
	}
	if rQ != "" {
		qs.Set("r", rQ)
	}

	var rawQ string
	if o.Raw != nil {
		rawQ = swag.FormatBool(*o.Raw)
	}
	if rawQ != "" {
		qs.Set("raw", rawQ)
	}

	var tsvQ string
	if o.Tsv != nil {
		tsvQ = swag.FormatBool(*o.Tsv)
	}
	if tsvQ != "" {
		qs.Set("tsv", tsvQ)
	}

	var upwQ string
	if o.Upw != nil {
		upwQ = *o.Upw
	}
	if upwQ != "" {
		qs.Set("upw", upwQ)
	}

	var wQ string
	if o.W != nil {
		wQ = swag.FormatInt64(*o.W)
	}
	if wQ != "" {
		qs.Set("w", wQ)
	}

	var xQ string
	if o.X != nil {
		xQ = swag.FormatInt64(*o.X)
	}
	if xQ != "" {
		qs.Set("x", xQ)
	}

	var yQ string
	if o.Y != nil {
		yQ = swag.FormatInt64(*o.Y)
	}
	if yQ != "" {
		qs.Set("y", yQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *PDF2TextURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *PDF2TextURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *PDF2TextURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on PDF2TextURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on PDF2TextURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *PDF2TextURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
