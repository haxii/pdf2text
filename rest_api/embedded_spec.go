// Code generated by go-swagger; DO NOT EDIT.

package rest_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "pdf2text",
    "title": "pdf2text",
    "version": "1.0.0"
  },
  "paths": {
    "/": {
      "post": {
        "description": "convert pdf to text",
        "consumes": [
          "application/pdf"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "pdf2text",
          "reverse_proxy"
        ],
        "summary": "convert pdf to text",
        "operationId": "PDF2Text",
        "parameters": [
          {
            "type": "integer",
            "description": "first page to convert",
            "name": "f",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "last page to convert",
            "name": "l",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "resolution, in DPI (default is 72)",
            "name": "r",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "x-coordinate of the crop area top left corner",
            "name": "x",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "y-coordinate of the crop area top left corner",
            "name": "y",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "width of crop area in pixels (default is 0)",
            "name": "w",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "height of crop area in pixels (default is 0)",
            "name": "h",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "maintain original physical layout",
            "name": "layout",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "assume fixed-pitch (or tabular) text, in fp",
            "name": "fixed",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "keep strings in content stream order",
            "name": "raw",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "discard diagonal text",
            "name": "nodiag",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "generate a simple HTML file, including the meta information",
            "name": "htmlmeta",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "generate a simple TSV file, including the meta information for bounding boxes",
            "name": "tsv",
            "in": "query"
          },
          {
            "type": "string",
            "default": "UTF-8",
            "description": "output text encoding name",
            "name": "enc",
            "in": "query"
          },
          {
            "enum": [
              "unix",
              "dos",
              "mac"
            ],
            "type": "string",
            "description": "output end-of-line convention (unix, dos, or mac)",
            "name": "eol",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "insert page breaks between pages",
            "name": "pgbrk",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "output bounding box for each word and page size to html. Sets ` + "`" + `htmlmeta` + "`" + `",
            "name": "bbox",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "like ` + "`" + `bbox` + "`" + ` but with extra layout bounding box data.  Sets ` + "`" + `htmlmeta` + "`" + `",
            "name": "bbox-layout",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "use the crop box rather than media box",
            "name": "cropbox",
            "in": "query"
          },
          {
            "type": "number",
            "description": "how much spacing we allow after a word before considering adjacent text to be a new column, as a fraction of the font size (default is 0.7, old releases had a 0.3 default)",
            "name": "colspacing",
            "in": "query"
          },
          {
            "type": "string",
            "description": "owner password (for encrypted files)",
            "name": "opw",
            "in": "query"
          },
          {
            "type": "string",
            "description": "user password (for encrypted files)",
            "name": "upw",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "pdf2text result",
            "schema": {
              "$ref": "#/definitions/pdf2TextResult"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "pdf2TextResult": {
      "type": "object",
      "properties": {
        "msg": {
          "description": "OK for success, otherwise info",
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "text": {
          "description": "text",
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "pdf2text",
    "title": "pdf2text",
    "version": "1.0.0"
  },
  "paths": {
    "/": {
      "post": {
        "description": "convert pdf to text",
        "consumes": [
          "application/pdf"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "pdf2text",
          "reverse_proxy"
        ],
        "summary": "convert pdf to text",
        "operationId": "PDF2Text",
        "parameters": [
          {
            "type": "integer",
            "description": "first page to convert",
            "name": "f",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "last page to convert",
            "name": "l",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "resolution, in DPI (default is 72)",
            "name": "r",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "x-coordinate of the crop area top left corner",
            "name": "x",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "y-coordinate of the crop area top left corner",
            "name": "y",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "width of crop area in pixels (default is 0)",
            "name": "w",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "height of crop area in pixels (default is 0)",
            "name": "h",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "maintain original physical layout",
            "name": "layout",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "assume fixed-pitch (or tabular) text, in fp",
            "name": "fixed",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "keep strings in content stream order",
            "name": "raw",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "discard diagonal text",
            "name": "nodiag",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "generate a simple HTML file, including the meta information",
            "name": "htmlmeta",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "generate a simple TSV file, including the meta information for bounding boxes",
            "name": "tsv",
            "in": "query"
          },
          {
            "type": "string",
            "default": "UTF-8",
            "description": "output text encoding name",
            "name": "enc",
            "in": "query"
          },
          {
            "enum": [
              "unix",
              "dos",
              "mac"
            ],
            "type": "string",
            "description": "output end-of-line convention (unix, dos, or mac)",
            "name": "eol",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "insert page breaks between pages",
            "name": "pgbrk",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "output bounding box for each word and page size to html. Sets ` + "`" + `htmlmeta` + "`" + `",
            "name": "bbox",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "like ` + "`" + `bbox` + "`" + ` but with extra layout bounding box data.  Sets ` + "`" + `htmlmeta` + "`" + `",
            "name": "bbox-layout",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "use the crop box rather than media box",
            "name": "cropbox",
            "in": "query"
          },
          {
            "type": "number",
            "description": "how much spacing we allow after a word before considering adjacent text to be a new column, as a fraction of the font size (default is 0.7, old releases had a 0.3 default)",
            "name": "colspacing",
            "in": "query"
          },
          {
            "type": "string",
            "description": "owner password (for encrypted files)",
            "name": "opw",
            "in": "query"
          },
          {
            "type": "string",
            "description": "user password (for encrypted files)",
            "name": "upw",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "pdf2text result",
            "schema": {
              "$ref": "#/definitions/pdf2TextResult"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "pdf2TextResult": {
      "type": "object",
      "properties": {
        "msg": {
          "description": "OK for success, otherwise info",
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "text": {
          "description": "text",
          "type": "string"
        }
      }
    }
  }
}`))
}
